const cardDetails=document.querySelector(".card__details"),cardDigits=document.querySelectorAll(".card--digits input"),cardInfo=document.querySelectorAll(".card--info input"),result=document.querySelector(".result"),success=document.querySelector(".alert-success"),error=document.querySelector(".alert-danger"),buyer_name=localStorage.getItem("buyer_name"),prodName=localStorage.getItem("prodName"),prodImg=localStorage.getItem("prodImage"),prodPrice=localStorage.getItem("prodPrice"),buyer_country=localStorage.getItem("buyer_country"),num_of_items=localStorage.getItem("num_of_items");document.querySelector(".buyerName").textContent=buyer_name,document.querySelector(".prodName").textContent=`Make Payment For ${num_of_items} ${prodName} at `,document.querySelector(".prodImg").src=`./img/${prodImg}`,document.querySelector(".cardN").value=buyer_name;const appCardDigits=[],countries=[{code:"US",currency:"USD",currencyName:"",country:"United States"},{code:"NG",currency:"NGN",currencyName:"",country:"Nigeria"},{code:"KE",currency:"KES",currencyName:"",country:"Kenya"},{code:"UG",currency:"UGX",currencyName:"",country:"Uganda"},{code:"RW",currency:"RWF",currencyName:"",country:"Rwanda"},{code:"TZ",currency:"TZS",currencyName:"",country:"Tanzania"},{code:"ZA",currency:"ZAR",currencyName:"",country:"South Africa"},{code:"CM",currency:"XAF",currencyName:"",country:"Cameroon"},{code:"GH",currency:"GHS",currencyName:"",country:"Ghana"}],formatAsMoney=(amount,buyerCountry)=>{const country=countries.find(country=>country.country===buyerCountry);return country?amount.toLocaleString(`en-${country.code}`,{style:"currency",currency:country.currency}):amount.toLocaleString(`en-${countries[0].code}`,{style:"currency",currency:countries[0].currency})},displayCartTotal=()=>{let bill,billFormatted=formatAsMoney(num_of_items*prodPrice,buyer_country);document.querySelector("#bill").textContent=billFormatted},flagIfInvalid=(field,isValid)=>{isValid?("is-invalid"===field.className&&field.classList.remove("is-invalid"),field.classList.remove("is-invalid")):("is-invalid"!==field.className&&field.classList.add("is-invalid"),field.classList.add("is-invalid"))},expiryDateFormatIsValid=field=>{const format=/^(0?[1-9]|1[0-2])\/?([0-9]{2})$/;return!!format.test(field)||(result.textContent="Please, Your Card Date Shoud Be In This Format - MM/YY. Thank You",error.style.display="block",success.style.display="none",!1)},validateCardExpiryDate=()=>{const card_date=cardInfo[1],cardDate=card_date.value;if(expiryDateFormatIsValid(cardDate)){const date=new Date,currentMonth=date.getMonth()+1,currentYear=date.getFullYear().toString().slice(-2);let cardMonth=cardDate.split("/")[0],cardYear=cardDate.split("/")[1];return cardMonth<currentMonth&&cardYear<=currentYear||cardYear<currentYear?(flagIfInvalid(card_date,!1),result.textContent="Oh No, Your Card Has Expired",error.style.display="block",success.style.display="none",!1):(flagIfInvalid(card_date,!0),!0)}return flagIfInvalid(card_date,!1),!1},validateCardHolderName=()=>{const card_name=cardInfo[0],cardName=card_name.value,format=/^([a-zA-Z]{3,})\s([a-zA-Z]{3,})$/;return format.test(cardName)?(flagIfInvalid(card_name,!0),!0):(flagIfInvalid(card_name,!1),result.textContent="Oh No, Your Name(s) Is Not Long Enough",error.style.display="block",success.style.display="none",!1)},detectCardType=first4Digits=>4===Number.parseInt(first4Digits[0])?(cardDetails.classList.add("is-visa"),cardDetails.classList.remove("is-mastercard"),"is-visa"):5===Number.parseInt(first4Digits[0])?(cardDetails.classList.add("is-mastercard"),cardDetails.classList.remove("is-visa"),"is-mastercard"):(cardDetails.classList.remove("is-visa"),cardDetails.classList.remove("is-mastercard"),cardDetails.classList.add("none"),void console.log("Oooops, You Card Is Not A Master Card Or A Visa Card")),validateWithLuhn=digits=>{let total=0;const newDigits=digits.reverse();return newDigits.forEach((value,index)=>{if(index%2>0){let doubled=2*Number.parseInt(value);total+=doubled>9?doubled-9:doubled}else total+=Number.parseInt(value)}),total%10==0},validateCardNumber=()=>{if(""===cardDigits[0].value||""===cardDigits[1].value||""===cardDigits[2].value||""===cardDigits[3].value)result.textContent="Nooopee, Please Enter Card Numbers",error.style.display="block",success.style.display="none";else{const digits=appCardDigits.flat();if(16!==digits.length)return result.textContent="Ooh Nooo, Can You Please Enter Complete Card Numbers",error.style.display="block",void(success.style.display="none");validateWithLuhn(digits)?(flagIfInvalid(cardDigits[0],!0),flagIfInvalid(cardDigits[1],!0),flagIfInvalid(cardDigits[2],!0),flagIfInvalid(cardDigits[3],!0),result.textContent="Welldone. Payment Was Successful",error.style.display="none",success.style.display="block",document.querySelector(".payButton").style.display="none"):(result.textContent="Oooops, You Cannot Use An Invalid Card",error.style.display="block",success.style.display="none",flagIfInvalid(cardDigits[0],!1),flagIfInvalid(cardDigits[1],!1),flagIfInvalid(cardDigits[2],!1),flagIfInvalid(cardDigits[3],!1))}},validatePayment=()=>{validateCardNumber(),validateCardHolderName(),validateCardExpiryDate()},smartInput=(event,fieldIndex,fields)=>{const A_KEYS=["Backspace","Delete","Tab","Shift","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"],acceptedKeys=A_KEYS.includes(event.key);let userKey=!1;if(userKey=fieldIndex<4?event.key>="0"&&event.key<="9":4===fieldIndex?event.key>="a"&&event.key<="z"||event.key>="A"&&event.key<="Z"||" "===event.key:event.key>="0"&&event.key<="9"||"/"===event.key,!userKey&&!acceptedKeys)return void event.preventDefault();const target=event.target;let{selectionStart:selectionStart,value:value}=target;if(userKey?fieldIndex<4&&(void 0===appCardDigits[fieldIndex]&&(appCardDigits[fieldIndex]=[]),void 0===appCardDigits[fieldIndex][selectionStart]&&(appCardDigits[fieldIndex][selectionStart]=[]),event.preventDefault(),appCardDigits[fieldIndex][selectionStart]+=event.key,target.value=value.substr(0,selectionStart)+event.key+value.substr(selectionStart+1),appCardDigits[fieldIndex]=target.value.split("").map((cardVal,index)=>cardVal>="0"&&cardVal<="9"?cardVal:appCardDigits[fieldIndex][index]),setTimeout(()=>{appCardDigits[fieldIndex]=target.value.split("").map((cardVal,index)=>cardVal>="0"&&cardVal<="9"?cardVal:appCardDigits[fieldIndex][index]),target.value=null===fields[fieldIndex].nextElementSibling?target.value:target.value.replace(/\d/g,"$")},500)):fieldIndex<4&&("Backspace"!==event.key&&"Delete"!==event.key||("Backspace"===event.key&&(event.preventDefault(),selectionStart=selectionStart-1>0?selectionStart-1:0),appCardDigits[fieldIndex].splice(selectionStart,1),target.value=appCardDigits[fieldIndex].map(val=>"$").join(""),target.selectionStart=selectionStart)),0===fieldIndex){const dig=appCardDigits[0];detectCardType(dig)}smartCursor(event,fieldIndex,fields)},smartCursor=(event,fieldIndex,fields)=>{const size=parseInt(fields[fieldIndex].getAttribute("size"));fields[fieldIndex].value.length===size&&(fields[fields.length-1]&&fields[fields.length-1].blur(),fields[fieldIndex]!==fields[fields.length-1]&&fields[fieldIndex+1].focus())},enableSmartTyping=()=>{const fields=[cardDigits[0],cardDigits[1],cardDigits[2],cardDigits[3],cardInfo[0],cardInfo[1]];fields.forEach((field,index,fields)=>{field.addEventListener("keydown",event=>smartInput(event,index,fields))})},uiCanInteract=()=>{displayCartTotal(),cardDigits[0].focus(),enableSmartTyping(),document.querySelector(".payButton").addEventListener("click",validatePayment)};window.addEventListener("load",uiCanInteract);